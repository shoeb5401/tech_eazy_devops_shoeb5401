name: Terraform Lifecycle

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Environment (Dev or Prod)"
        required: true
        default: Dev
      action:
        description: "Terraform action (apply or destroy)"
        required: true
        default: apply

  push:
    branches:
      - main
    tags:
      - "deploy-dev"
      - "deploy-prod"

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîß Set Stage & Action
        id: set_vars

        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "STAGE=${{ github.event.inputs.stage }}" >> $GITHUB_ENV
            echo "ACTION=${{ github.event.inputs.action }}" >> $GITHUB_ENV
            echo "stage=${{ github.event.inputs.stage }}" >> $GITHUB_OUTPUT
          else
            ref="${GITHUB_REF##*/}"
            if [[ "$ref" == deploy-prod* ]]; then
              echo "STAGE=Prod" >> $GITHUB_ENV
              echo "stage=Prod" >> $GITHUB_OUTPUT
            else
              echo "STAGE=Dev" >> $GITHUB_ENV
              echo "stage=Dev" >> $GITHUB_OUTPUT
            fi
            echo "ACTION=apply" >> $GITHUB_ENV
          fi

      - name: üîê Export GH_PAT for all environments
        run: echo "TF_VAR_gh_pat=${{ secrets.GH_PAT }}" >> $GITHUB_ENV


      - name: üî§ Normalize Stage & Export TF_VARS
        run: |
          STAGE_LOWER=$(echo $STAGE | tr '[:upper:]' '[:lower:]')
          echo "STAGE_LOWER=$STAGE_LOWER" >> $GITHUB_ENV
          echo "TF_VAR_stage=$STAGE_LOWER"    >> $GITHUB_ENV
          echo "TF_VAR_repo_owner=shoeb5401"  >> $GITHUB_ENV
          echo "TF_VAR_repo_name=Secure-Repo-Config" >> $GITHUB_ENV


      - name: üõ†Ô∏è Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0


      - name: üíæ Cache Terraform dependencies
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: terraform-${{ runner.os }}-${{ env.STAGE }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: ‚öôÔ∏è Terraform Init


        run: terraform init -backend-config="backend-${STAGE_LOWER}.config"
        working-directory: terraform

      - name: üß© Terraform Workspace Select or Create
        run: |
          terraform workspace list
          if terraform workspace list | grep -qw "${STAGE}"; then
            terraform workspace select "${STAGE}"
          else
            terraform workspace new "${STAGE}"
          fi
        working-directory: terraform

      - name: üìù Terraform Validate and Plan
        run: |
          terraform validate
          if [ "${ACTION}" = "destroy" ]; then
            terraform plan -destroy -var-file="${STAGE_LOWER}_config.tfvars" -out=tfplan
          else
            terraform plan -var-file="${STAGE_LOWER}_config.tfvars" -out=tfplan
          fi
        working-directory: terraform

      - name: üöÄ Terraform Apply
        if: env.ACTION == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform

      - name: üåê Get EC2 Public IP
        id: ec2_ip
        if: env.ACTION == 'apply'
        working-directory: terraform
        run: |
          set -e
          EC2_IP=$(terraform output writeonly_instance_public_ip | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1 | tr -d ' \t\n\r')
          if [[ -z "$EC2_IP" ]]; then
            echo "Terraform output was invalid or empty"
            exit 1
          fi
          echo "ec2_ip<<EOF" >> "$GITHUB_OUTPUT"
          echo "$EC2_IP" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: üîë Get Private Key Path
        id: get_key
        if: env.ACTION == 'apply'
        run: |
          set -e
          RAW_OUTPUT=$(terraform output private_key_file)
          KEY_PATH=$(echo "$RAW_OUTPUT" | grep -oE '[^" ]+\.pem' | head -n1 | tr -d '\n\r\t ')
          echo "KEY_PATH=$KEY_PATH"
          echo "key_path=$KEY_PATH" >> $GITHUB_ENV
          echo "key_path<<EOF" >> "$GITHUB_OUTPUT"
          echo "$KEY_PATH" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        working-directory: terraform

      - name: üñ•Ô∏è SSH and Tail Logs
        if: env.ACTION == 'apply'
        continue-on-error: true
        working-directory: terraform
        run: |
          chmod 400 "${{ env.key_path }}"
          ssh -o StrictHostKeyChecking=no -i "${{ env.key_path }}" ubuntu@${{ steps.ec2_ip.outputs.ec2_ip }} \

          "timeout 200 tail -f /home/ubuntu/script.log || true "


      - name: üåê Wait for Port 80 (App Health Check)
        if: env.ACTION == 'apply'
        env:
          EC2_IP: ${{ steps.ec2_ip.outputs.ec2_ip }}
        working-directory: terraform
        shell: bash
        run: |
          echo "üåê Waiting for app at http://$EC2_IP"
          echo "üì° EC2_IP resolved to: $EC2_IP"

          echo "üîé Waiting for port 80 to open using netcat (nc)..."
          MAX_PORT_ATTEMPTS=10
          for i in $(seq 1 $MAX_PORT_ATTEMPTS); do
            if nc -z "$EC2_IP" 80; then
              echo "‚úÖ Port 80 is open"
              break
            fi
            echo "‚ùå Port 80 not open yet. Attempt $i of $MAX_PORT_ATTEMPTS. Retrying in 5 seconds..."
            sleep 5
          done

          echo "üåê Verifying HTTP response with curl..."
          MAX_ATTEMPTS=10
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "‚è≥ Attempt $i..."
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://$EC2_IP")
            echo "‚û°Ô∏è Status Code: $STATUS_CODE"

            if [[ "$STATUS_CODE" == "200" ]]; then
              echo "‚úÖ App is reachable at http://$EC2_IP"
              exit 0
            fi

            echo "‚ùå Not reachable yet. Retrying in 5 seconds..."
            sleep 5
          done

          echo "‚ùå Failed: App not reachable after $MAX_ATTEMPTS attempts"
          exit 1

      - name: üí£ Terraform Destroy
        if: env.ACTION == 'destroy'
        run: terraform destroy -auto-approve -var-file="${STAGE_LOWER}_config.tfvars"
        working-directory: terraform

      - name: üí£ Trigger Shutdown Remotely
        if: env.ACTION == 'apply'
        run: |
          echo "Triggering EC2 shutdown..."

          ssh -o StrictHostKeyChecking=no -i "${{ env.key_path }}" ubuntu@${{ steps.ec2_ip.outputs.ec2_ip }} "sudo shutdown -h +10"

        working-directory: terraform
